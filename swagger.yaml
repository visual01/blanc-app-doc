openapi: 3.0.3
info:
  title: Blanc app - OpenAPI 3.0
  description: Sport application
  contact:
    email: visual01@yandex.ru
  version: 1.0.0
tags:
  - name: auth
    description: all aboout authorization and authentication
    externalDocs:
      description: oauth2 docs
      url: https://datatracker.ietf.org/doc/html/rfc6749
  - name: backend
    description: all about backend methods
paths:
  /auth/realms/{realm_name}/protocol/openid-connect/auth:
    get:
      tags:
        - auth
      summary: ссылка на экран авторизации
      description: 'example: GET /auth?response_type=code&client_id=s6BhdRkqt3&state=xyz
        &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcallback'
      parameters:
        - name: realm_name
          description: Название реалма в keycloak
          in: path
          required: true
          schema:
            type: string
        - name: response_type
          description: Способ авторизации (flow)
          in: query
          required: true
          schema:
            type: string
            enum: [code]
        - name: client_id
          description: Идентификатор клиента (приложения) в указанном реалме
          in: query
          required: true
          schema:
            type: string
            example: clientId
        - name: state
          description: Рандомное значение для маппинга запроса с ответом в callback
          in: query
          required: true
          schema:
            type: string
        - name: redirect_uri
          description: url адресс callback куда будет направлен ползователь после авторизации
          in: query
          required: false
          schema:
            type: string
        - name: scope
          in: query
          required: false
          schema:
            type: string
          description: Набор видимости атрибутов, к которым пользователь дает доступ при авторизации
      responses:
        '200':
          description: HTML страница авторизации
  /auth/callback:
    get:
      tags:
        - auth
      summary: callback для авторизации
      description: Сюда будут прокинуты значения авторизационного кода, выпущенного в процессе авторизации, который нужно использовать для получения access и refresh токенов
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string  
                example: URI https://${host}/auth/callback?state=xyzq&session_state=be5c99c4-dd97-4975-ba0b-d7e34d6dfed3&iss=https%3A%2F%2Fhost.ru%2Fauth%2Frealms%2FrealmName&code=7d24debf-b69e-11f.be5c99c4-dd97-42
  /auth/realms/{realm_name}/protocol/openid-connect/token:
    post:
      tags:
        - auth
      summary: Получить access/refrseh токены
      description: '
        1.Обменять authorization_code на access и refresh токены <br>
        2.Обменять refresh токен на новый access токен
      ' 
      parameters:
        - name: realm_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum: [authorization_code, refresh_token]
                  description: Значение authorization_code ИЛИ refresh_token
                client_id:
                  type: string
                  description:  Идентификатор клиента в реалме
                client_secret:
                  type: string
                  description: Значения секрета клиента в реалме
                code:
                  type: string
                  description: Значение кода, который вернулся на callback после авторизации. Передавать только для grant_type = authorization_code
                refresh_token:
                  type: string
                  description: Токен обновления. Передавать только для grant_type = refresh_token
                redirect_uri:
                  type: string
                  description: callback куда будет возвращен access и refresh токены
                code_verifier:
                  type: string
                  description: Ключ для сервера авторизации, который не позволит получить токен доступа стороннему приложению (для безопасности)
              required:
                - client_id
                - client_secret
                - grant_type
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: sfsfafagaga
                  expires_in:
                    type: integer
                    example: 60
                  refresh_token:
                    type: string
                    example: sasfasfafasf
                  refresh_expires_in:
                    type: integer
                    example: 1800
                  token_type:
                    type: string
                    example: Bearer
                  not-before-policy:
                    type: integer
                    example: 0
                  session_state:
                    type: string
                    example: skaokfoakfoakfsofq
                required:
                  - access_token
                  - refresh_token
                  - expires_in
                  - refresh_expires_in
  /auth/realms/{realm_name}/protocol/openid-connect/token/introspect:
    post:
      tags:
        - auth
      summary: получить информацию по access_token (в частности проверить срок его жизни TTL) 
      parameters:
        - name: realm_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                  description:  Идентификатор клиента в реалме
                client_secret:
                  type: string
                  description: Значения секрета клиента в реалме
                token:
                  type: string
                  description: Значение кода, который вернулся на callback после авторизации
              required:
                - client_id
                - client_secret
                - token
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                description: JWT токен
                properties:
                  active:
                    type: boolean
                  ...:
                    type: string
                required:
                  - active
  /auth/realms/{realm_name}/protocol/openid-connect/logout:
    post:
      tags:
        - auth
      summary: разлогин (удалить сессию пользователя)
      parameters:
        - name: realm_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                  description:  Идентификатор клиента в реалме
                client_secret:
                  type: string
                  description: Значения секрета клиента в реалме
                refresh_token:
                  type: string
                  description: Токен обновления
              required:
                - client_id
                - client_secret
                - refresh_token
      responses:
        '204':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                example: null
  /check-subscription:
    get:
      tags:
        - backend
      summary: Проверить активна ли подписка пользователя
      description: '
        **Логика работы** <br>
        1. Необходимо проверить, что access_token не протух <br>
        1.1. Если access_token протух, то необходимо вернуть ответ со status_code = 401 <br>
        1.2. Если access_token не протух, то необходимо перейти на шаг 3 <br>
        2. Необходимо проверить есть активная подписка, поле в БД TBD <br>
        3. Вернуть ответ
      '
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          example: ${access token}
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_active_subscription:
                    type: boolean
                    example: false
                    nullable: false
                  exprire_time:
                    type: string
                    format: datetime
                    nullable: true
                    example: '2024-04-07T07:51:15+00:00'
                required:
                  - is_active_subscription
      security:
        - auth_token: [] 
  /invite-code/{code}:
    post:
      tags:
        - backend
      summary: Прикрепить код приглашения к аккаунту (активировать подписку)
      description: '
        **Логика работы** <br>
        1.Необходимо проверить, что access_token не протух <br>
        1.1. Если access_token протух, то необходимо вернуть ответ со status_code = 401 <br>
        1.2. Если access_token не протух, то необходимо перейти на шаг 3 <br>
        2.Необходимо проверить что в БД есть переданный пользователем код (поле code) и что он не был использован ранее <br>
        3.1. Код есть и не был использован ранее, то TBD <br>
        3.2. Код есть, но был использован ранее, то TBD <br>
        3.3. Кода нет, то TBD <br>
        4. Вернуть ответ <br>
      '
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          example: ${access token}
        - in: path
          name: code
          schema:
            type: string
          required: true
          example: ${access token}
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_code_verified:
                    type: boolean
                    example: false
                    nullable: false
                  attempts:
                    type: integer
                    example: 3
                    nullable: false
                  text:
                    type: string
                    example: Осталось 3 попытки
                    nullable: false
                required:
                  - is_code_verified
                  - attempts
                  - text
      security:
        - auth_token: [] 
  /medical-liability-confirmation:
    post:
      tags:
        - backend
      summary: Принятие согласия об отсутствии медицинской ответственности
      description: '
        TBD
      '
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          example: ${access token}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
               accepted_medical_liablility:
                  type: boolean
                  description: Согласие об отсутствии медицинской ответственности принятно
                  nullable: false
                  example: true
              required:
                - accepted_medical_liablility
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                example: null
      security:
        - auth_token: [] 
  /user-data:
    get:
      tags:
        - backend
      summary: Получить данные пользователя
      description: 'TBD'
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          example: ${access token}
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object  
                properties:
                  age:
                    type: integer
                    example: 33
                    nullable: true
                  gender:
                    type: object
                    nullable: false
                    properties:
                      value:
                        type: string
                        enum: [MALE, FEMALE]
                        example: MALE
                        nullable: false
                      display_name:
                        type: string
                        nullable: false
                        example: мужчина
                    required:
                      - value
                      - display_name
                  weight:
                    type: object
                    nullable: false
                    properties:
                      value:
                        type: number
                        format: float
                        example: 73.3
                        nullable: false
                      unit:
                        type: string
                        format: enum
                        enum: ['KG']
                        nullable: false
                      display_name:
                        type: string
                        example: кг
                        nullable: false
                    required:
                      - value
                      - unit
                      - display_name
                  height:
                    type: object
                    nullable: false
                    properties:
                      value:
                        type: number
                        format: float
                        nullable: false
                        example: 173.2
                      unit:
                        type: string
                        enum: ["SM"]
                        nullable: false
                        example: SM
                      display_name:
                        type: string
                        nullable: false
                        example: см
                    required:
                      - value
                      - unit
                      - display_name
      security:
        - auth_token: [] 
    put:
      tags:
        - backend
      summary: Создать/обновить данные пользователя
      description: '
        TBD
      '
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          example: ${access token}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
                  description: Токен доступа
                  nullable: false
                  example: "aisjifi81jd"
                accepted_medical_liablility:
                  type: boolean
                  description: Согласие об отсутствии медицинской ответственности принятно
                  nullable: false
                  example: true
              required:
                - access_token
                - invite_code
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                example: null
      security:
        - auth_token: [] 
  /parent-playlist:
    get:
      tags:
        - backend
      summary: Получить родительский playlist
      description: 'TBD'
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          example: ${access token}
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string  
                $ref: '#/components/schemas/parentPlayListResponse'
      security:
        - auth_token: [] 
  /child-playlist:
    get:
      tags:
        - backend
      summary: Получить дочерний playlist (определенного качества)
      description: 'TBD'
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          example: ${access token}
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.apple.mpegurl:
              schema:
                type: string  
                $ref: '#/components/schemas/childPlaylistResponse'
            audio/mpegurl:
              schema:
                type: string  
                $ref: '#/components/schemas/childPlaylistResponse'
      security:
        - auth_token: [] 
components:
  schemas:
    childPlaylistResponse:
      type: string
      example: | 
        #EXTM3U
        #EXT-X-VERSION:3
        #EXT-X-TARGETDURATION:10
        #EXT-X-MEDIA-SEQUENCE:0
        #EXT-X-PLAYLIST-TYPE:VOD
        #EXTINF:6.006400,
        https://yandex.ru/360/exercise1001.ts
        #EXTINF:6.006400,
        https://yandex.ru/360/exercise1002.ts
        #EXTINF:6.006400,
        https://yandex.ru/360/exercise2001.ts
        #EXTINF:6.006400,
        https://yandex.ru/360/exercise1004.ts
        #EXT-X-ENDLIST
    parentPlayListResponse:
      type: string
      example: |
        ff
  securitySchemes:
    auth_token:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /auth/realms/{realm_name}/protocol/openid-connect/auth
          tokenUrl: /auth/realms/{realm_name}/protocol/openid-connect/token
          scopes: {}
    api_key:
      type: apiKey
      name: api_key
      in: header
security:
  - api_key: []
    
