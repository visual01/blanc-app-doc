openapi: 3.0.3
info:
  title: Blanc app - OpenAPI 3.0
  description: Sport application
  contact:
    email: visual01@yandex.ru
  version: 1.0.0
tags:
  - name: auth
    description: all aboout authorization and authentication
    externalDocs:
      description: oauth2 docs
      url: https://datatracker.ietf.org/doc/html/rfc6749
  - name: backend
    description: all about backend methods
paths:
  /auth/realms/{realm_name}/protocol/openid-connect/auth:
    get:
      tags:
        - auth
      summary: ссылка на экран авторизации
      description: 'example: GET /auth?response_type=code&client_id=s6BhdRkqt3&state=xyz
        &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcallback'
      parameters:
        - name: realm_name
          description: Название реалма в keycloak
          in: path
          required: true
          schema:
            type: string
        - name: response_type
          description: Способ авторизации (flow)
          in: query
          required: true
          schema:
            type: string
            enum: [code]
        - name: client_id
          description: Идентификатор клиента (приложения) в указанном реалме
          in: query
          required: true
          schema:
            type: string
            example: clientId
        - name: state
          description: Рандомное значение для маппинга запроса с ответом в callback
          in: query
          required: true
          schema:
            type: string
        - name: redirect_uri
          description: url адресс callback куда будет направлен ползователь после авторизации
          in: query
          required: false
          schema:
            type: string
        - name: scope
          in: query
          required: false
          schema:
            type: string
          description: Набор видимости атрибутов, к которым пользователь дает доступ при авторизации
      responses:
        '200':
          description: HTML страница авторизации
  /auth/callback:
    get:
      tags:
        - auth
      summary: callback для авторизации
      description: Сюда будут прокинуты значения авторизационного кода, выпущенного в процессе авторизации, который нужно использовать для получения access и refresh токенов
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string  
                example: URI https://${host}/auth/callback?state=xyzq&session_state=be5c99c4-dd97-4975-ba0b-d7e34d6dfed3&iss=https%3A%2F%2Fhost.ru%2Fauth%2Frealms%2FrealmName&code=7d24debf-b69e-11f.be5c99c4-dd97-42
  /auth/realms/{realm_name}/protocol/openid-connect/token:
    post:
      tags:
        - auth
      summary: Получить access/refrseh токены
      description: '
        1.Обменять authorization_code на access и refresh токены <br>
        2.Обменять refresh токен на новый access токен
      ' 
      parameters:
        - name: realm_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum: [authorization_code, refresh_token]
                  description: Значение authorization_code ИЛИ refresh_token
                client_id:
                  type: string
                  description:  Идентификатор клиента в реалме
                client_secret:
                  type: string
                  description: Значения секрета клиента в реалме
                code:
                  type: string
                  description: Значение кода, который вернулся на callback после авторизации. Передавать только для grant_type = authorization_code
                refresh_token:
                  type: string
                  description: Токен обновления. Передавать только для grant_type = refresh_token
                redirect_uri:
                  type: string
                  description: callback куда будет возвращен access и refresh токены
                code_verifier:
                  type: string
                  description: Ключ для сервера авторизации, который не позволит получить токен доступа стороннему приложению (для безопасности)
              required:
                - client_id
                - client_secret
                - grant_type
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: sfsfafagaga
                  expires_in:
                    type: integer
                    example: 60
                  refresh_token:
                    type: string
                    example: sasfasfafasf
                  refresh_expires_in:
                    type: integer
                    example: 1800
                  token_type:
                    type: string
                    example: Bearer
                  not-before-policy:
                    type: integer
                    example: 0
                  session_state:
                    type: string
                    example: skaokfoakfoakfsofq
                required:
                  - access_token
                  - refresh_token
                  - expires_in
                  - refresh_expires_in
  /auth/realms/{realm_name}/protocol/openid-connect/token/introspect:
    post:
      tags:
        - auth
      summary: получить информацию по access_token (в частности проверить срок его жизни TTL) 
      parameters:
        - name: realm_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                  description:  Идентификатор клиента в реалме
                client_secret:
                  type: string
                  description: Значения секрета клиента в реалме
                token:
                  type: string
                  description: Значение кода, который вернулся на callback после авторизации
              required:
                - client_id
                - client_secret
                - token
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                description: JWT токен
                properties:
                  active:
                    type: boolean
                  ...:
                    type: string
                required:
                  - active
  /auth/realms/{realm_name}/protocol/openid-connect/logout:
    post:
      tags:
        - auth
      summary: разлогин (удалить сессию пользователя)
      parameters:
        - name: realm_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                  description:  Идентификатор клиента в реалме
                client_secret:
                  type: string
                  description: Значения секрета клиента в реалме
                refresh_token:
                  type: string
                  description: Токен обновления
              required:
                - client_id
                - client_secret
                - refresh_token
      responses:
        '204':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                example: null
  /auth/admin/realms/{realm_name}/users/{user_id}:
    put:
      tags:
        - auth
      summary: Обновить аттрибуты пользователя (если передан 1 аттрибут, ранее запианные будут удалены)
      parameters:
        - name: realm_name
          in: path
          required: true
          schema:
            type: string
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                attributes:
                  type: object
                  properties:
                    sex:
                      type: string
                      description:  Пол пользователя. Доступные значения [MALE, FEMALE]
                      example: MALE
                    weight:
                      type: number
                      format: float
                      description: Вес пользователя
                      example: 79.4
                    height:
                      type: number
                      format: float
                      description: Рост пользователя
                      example: 179
                    age:
                      type: number
                      format: integer
                      description: Возраст пользователя
                      example: 27
                    accepted_no_medical_liability:
                      type: boolean
                      description: Пользователь согласился с условием отказа от медицинской ответственности
                    is_active_subscription:
                      type: boolean
                      description: Есть ли активная подписка
                    subscription_expire_time:
                      type: string
                      format: datetime
                      nullable: true
                      example: '2024-04-07T07:51:15+00:00'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  attributes:
                    type: object
                    properties:
                      sex:
                        type: string
                        description:  Пол пользователя. Доступные значения [MALE, FEMALE]
                        example: MALE
                      weight:
                        type: number
                        format: float
                        description: Вес пользователя
                        example: 79.4
                      height:
                        type: number
                        format: float
                        description: Рост пользователя
                        example: 179
                      age:
                        type: number
                        format: integer
                        description: Возраст пользователя
                        example: 27
                      accepted_no_medical_liability:
                        type: boolean
                        description: Пользователь согласился с условием отказа от медицинской ответственности
                      is_active_subscription:
                        type: boolean
                        description: Есть ли активная подписка
                      subscription_expire_time:
                        type: string
                        format: datetime
                        nullable: true
                        example: '2024-04-07T07:51:15+00:00'
  /invite-code:
    post:
      tags:
        - backend
      summary: Прикрепить код приглашения к аккаунту (активировать подписку)
      description: '
        **Логика работы** <br>
        1.Необходимо получить данные (проверить валидность) о токене пользователя POST /auth/realms/{realm_name}/protocol/openid-connect/token/introspect <br>
        1.1. Если параметр "active" = true, то access_token НЕ протух, перейти на шаг 2 <br>
        1.2. Если параетр "acrive"= false или status_code ответа != 200, то вернуть  то необходимо вернуть ответ со status_code = 401. <br>
        2.Необходимо получить идентификатор пользователя из запроса 1, поле sub и проверить что  текущего пользователя есть доступные попытки ввода "кода приглашения" (ищем по колонке user_id, проверяем поле amount_left <br>
        2.1. Если пользователь не найден, то записываем его в БД указывая user_id, amount_left = 2, и в поле last_try текущую дату и время, переходим на шаг 3
        2.2. Если пользователь найден, и значение amount_left = 0, то необходимо проверить сколько времени прошло с последней попытки (поле last_try) <br>
        2.2.1. Если прошло час или более, то необходимо сбросить кол-во попыток (как если бы пользователь не был найден) то перейти на шаг 2.1.
        на в БД attempt имеется пользователь (user_id) <br>
        2.2.2. Если прошло меньше часа, то вернуть пользователю ответ со status_code 200, когда будет доступна следующая попытка { "attempts": 0,"text": "Осталось 3 попытки", "next_try": "2024-04-07T07:51:15+00:00"}. Следующие 3 попытки доступны через час после последней.
        Необходимо проверить что в БД в таблице invite_code есть переданный пользователем код (колонка code) и что значение is_activated = false. <br>
        2.3.Если пользователь найден, и значение amount_left > 0, то необходимо уменьшить значение amount_left на 1 и перейти на шаг 3. <br>
        3.  Необходимо проверить что в БД есть переданный пользователем код (поле code) и что он не был использован ранее <br>
        3.1. Код есть, но был использован ранее ИЛИ кода нет, то вернуть ответ со status_code 200  { "is_code_verified": false, "attempts": N,"text": "Осталось N попытки", "next_try": "2024-04-07T07:51:15+00:00"}<br>
        3.2. Код есть и не был использован ранее, то необходимо записать в таблицу invite_code в колонку is_activated = true, а в поле activation_date текущую дату. <br>
        4. Необходимо проверить наличие активного токена доступа (хранится в оперативной памяти) администратора для обновления данных пользователя у сервера авторизации
        4.1. Если токен доступа администратора не протух, то перейти на шаг 5  <br>
        4.2. Если токен доступа администратора протух необходимо получить новый токен POST /auth/realms/{realm_name}/protocol/openid-connect/token и перейти на шаг 5 <br>
        5. Необходимо отправить запрос со всеми имеющимеся аттрибутами указанными в PUT /auth/admin/realms/{realm_name}/users/{user_id}, которые есть вернулись в методе introspect (user_id - значение поля sub) передав информацию о активности подписки и её сроки (если заполнено поле subscription_period_in_days, то передаём дату окончания подписки, которая равна subscription_period_in_days + текущая дата)<br>
        5. Вернуть ответ <br>
      '
      parameters:
        - in: header
          name: Authorization
          description: Токен доступа пользователя
          schema:
            type: string
          required: true
          example: Bearer ${access token}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
               code:
                  type: string
                  description: Код приглашение выданный пользователю
                  nullable: false
                  example: '12199472'
              required:
                - code
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_code_verified:
                    type: boolean
                    example: false
                    nullable: false
                  attempts:
                    type: integer
                    example: 3
                    nullable: false
                  text:
                    type: string
                    example: Осталось 3 попытки
                    nullable: false
                required:
                  - is_code_verified
                  - attempts
                  - text
      security:
        - auth_token: [] 
  /medical-liability-confirmation:
    post:
      tags:
        - backend
      summary: Принятие согласия об отсутствии медицинской ответственности
      description: '
        TBD
      '
      parameters:
        - in: header
          name: Authorization
          description: Токен доступа пользователя
          schema:
            type: string
          required: true
          example: Bearer ${access token}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
               accepted_medical_liablility:
                  type: boolean
                  description: Согласие об отсутствии медицинской ответственности принятно
                  nullable: false
                  example: true
              required:
                - accepted_medical_liablility
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                example: null
      security:
        - auth_token: [] 
  /parent-playlist:
    post:
      tags:
        - backend
      summary: Получить родительский playlist ****(???????)****
      description: 'TBD'
      parameters:
        - in: header
          name: Authorization
          description: Токен доступа пользователя
          schema:
            type: string
          required: true
          example: Bearer ${access token}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                training_duration:
                  type: number
                  format: integer
                  minimum: 10
                  maximum: 120
                training_type:
                  type: string
                  example: TBD
                  description: Вид тренировки
                training_complexity:
                  type: string
                  example: TBD
                  description: Сложность тренировки
                training_hitch:
                  type: string
                  example: TBD
                  description: Заминка
                body_part_exceptions:
                  type: array
                  description: Части тела на которые не нужно возвращать упражнения
                  items:
                    type: string
                    example: TBD
                warm_up:
                  type: string
                  example: TBD
                  description: Разминка
              required:
                - training_duration
                - training_type
                - training_complexity
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.apple.mpegurl:
              schema:
                $ref: '#/components/schemas/parentPlayListResponse'
            audio/mpegurl:
              schema:
                 $ref: '#/components/schemas/parentPlayListResponse'
      security:
        - auth_token: [] 
  /child-playlist:
    get:
      tags:
        - backend
      summary: Получить дочерний playlist ****(???????)****
      description: 'TBD'
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          example: Bearer ${access token}
        - in: query
          name: q
          description: качество видео
          schema:
            type: number
            format: integer
            enum:
              - 360
              - 480
              - 720
              - 1080
          required: true
        - in: query
          name: type
          description: тип содержимого плейлиста
          schema:
            type: string
            enum:
              - VIDEO
              - AUDIO
          required: true
        - in: query
          name: content
          description: идентификаторы записей
          schema:
            type: array
            items:
              type: number
              format: integer
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.apple.mpegurl:
              schema:
                $ref: '#/components/schemas/childPlaylistResponse'
            audio/mpegurl:
              schema:
                $ref: '#/components/schemas/childPlaylistResponse'
      security:
        - auth_token: [] 
  /user-data:
    patch:
      tags:
        - backend
      summary: Создать/обновить данные пользователя (НЕ ДЕЛАТЬ СЕЙЧАС)
      description: '
        TBD
      '
      parameters:
        - in: header
          name: Authorization
          description: Токен доступа пользователя
          schema:
            type: string
          required: true
          example: Bearer ${access token}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                age:
                  type: number
                  description: Возраст
                  nullable: true
                  example: 34
                weight:
                  type: number
                  format: float
                  nullable: true
                  example: 73.4
                gender:
                  type: string
                  nullable: true
                  example: "MALE"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                example: null
      security:
        - auth_token: [] 

components:
  schemas:
    childPlaylistResponse:
      type: string
      description: Содержит ссылки на сегменты в s3 хранилище
      example: | 
        #EXTM3U
        #EXT-X-VERSION:3
        #EXT-X-TARGETDURATION:10
        #EXT-X-MEDIA-SEQUENCE:0
        #EXT-X-PLAYLIST-TYPE:VOD
        #EXTINF:6.006400,
        https://yandex.ru/360/exercise1001.ts
        #EXTINF:6.006400,
        https://yandex.ru/360/exercise1002.ts
        #EXTINF:6.006400,
        https://yandex.ru/360/exercise2001.ts
        #EXTINF:6.006400,
        https://yandex.ru/360/exercise1004.ts
        #EXT-X-ENDLIST
    parentPlayListResponse:
      type: string
      description: Содержит ссылки на плейллисты с разным качеством видео
      example: |
        #EXTM3U 
        #EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID="audio",LANGUAGE="ru",NAME="russian",AUTOSELECT=YES, DEFAULT=YES,URI="https://backendIP/v0/slave-playlist?content=1,2,3,4,5,6,7,8&type=AUDIO"
        #EXT-X-STREAM-INF:BANDWIDTH=400000,RESOLUTION=640x358,CODECS="avc1.42e00a,mp4a.40.2",AUDIO="audio"
        https://backendIP/v0/slave-playlist?content=1,2,3,4,5,6,7,8&type=VIDEO&q=360
        #EXT-X-STREAM-INF:BANDWIDTH=800000,RESOLUTION=858x482,CODECS="avc1.42e00a,mp4a.40.2",AUDIO="audio"
        https://backendIP/v0/slave-playlist?content=1,2,3,4,5,6,7,8&type=VIDEO&q=480
        #EXT-X-STREAM-INF:BANDWIDTH=2000000,RESOLUTION=1280x720,CODECS="avc1.42e00a,mp4a.40.2",AUDIO="audio"
        https://backendIP/v0/slave-playlist?content=1,2,3,4,5,6,7,8&type=VIDEO&q=720
        #EXT-X-STREAM-INF:BANDWIDTH=3000000,RESOLUTION=1920x1080,CODECS="avc1.42e00a,mp4a.40.2",AUDIO="audio"
        https://backendIP/v0/slave-playlist?content=1,2,3,4,5,6,7,8&type=VIDEO&q=1080
  securitySchemes:
    auth_token:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /auth/realms/{realm_name}/protocol/openid-connect/auth
          tokenUrl: /auth/realms/{realm_name}/protocol/openid-connect/token
          scopes: {}
    x_api_key:
      type: apiKey
      name: api_key
      in: header
security:
  - x_api_key: []
  
